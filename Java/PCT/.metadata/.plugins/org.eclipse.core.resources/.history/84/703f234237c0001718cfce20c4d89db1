/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RiskUI.java
 *
 * Created on Nov 9, 2010, 10:19:49 PM
 */

package risk.controller;

import risk.model.*;
import risk.model.Observable.RiskAttackPhaseModel;
import risk.model.Observable.RiskFortifyPhaseModel;
import risk.model.Observable.RiskReinforcementPhaseModel;
import risk.model.Observable.RiskStartupEndPhaseModel;
import risk.model.Observable.RiskStartupPhaseModel;
import risk.view.RiskPhaseViewObserver;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Label;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import risk.model.*;
import risk.controller.RiskPlayerPanelViewController;

/**
 * This class contains the card logic as well as it tales the phase from the
 * RiskGameModel and displays when a player should put armies on unoccupied
 * territory and when the army should be placed on the occupied territory.
 * 
 * @author Team8
 */
public class RiskController extends javax.swing.JFrame implements MouseListener {

	public int getCountTradeCards() {
		return countTradeCards;
	}

	public RiskController(String test) {
		risk = new RiskGameModel(test);
	}

	public RiskPlayerModel getRiskCurPlayer() {
		return risk.curPlayer;
	}

	public void setRiskCurPlayer(RiskPlayerModel rpm) {

		risk.curPlayer = rpm;
		risk.curPlayer.setCard(new RiskCardModel(1, 39));
		risk.curPlayer.setCard(new RiskCardModel(1, 39));
		risk.curPlayer.setCard(new RiskCardModel(3, 11));

	}

	public RiskController() {
		risk = new RiskGameModel();
		initComponents();
		initializePhaseView(risk);
		setLocationRelativeTo(null);
		setResizable(false);
		jPanel1.repaint();
		jPanel1.addMouseListener(this);
		AttackButton.setVisible(false);
	}

	private void initializePhaseView(RiskGameModel risk) {

		RiskStartupPhaseModel objStartupPhaseModelObservable = RiskStartupPhaseModel.getInstance();
		RiskStartupEndPhaseModel objRiskStartupEndPhaseModel = RiskStartupEndPhaseModel.getInstance();
		RiskReinforcementPhaseModel objRiskReinforcementPhaseModelObservable = RiskReinforcementPhaseModel.getInstance();
		RiskAttackPhaseModel objRiskAttackPhaseModelObservable = RiskAttackPhaseModel.getInstance();
		RiskFortifyPhaseModel objRiskFortifyPhaseModelObservable = RiskFortifyPhaseModel.getInstance();
		RiskPhaseViewObserver objPhaseViewObserver = RiskPhaseViewObserver.getInstance();
		
		
		objStartupPhaseModelObservable.addObserver(objPhaseViewObserver);
		objRiskReinforcementPhaseModelObservable.addObserver(objPhaseViewObserver);
		objRiskAttackPhaseModelObservable.addObserver(objPhaseViewObserver);
		objRiskFortifyPhaseModelObservable.addObserver(objPhaseViewObserver);
		objRiskStartupEndPhaseModel.addObserver(objPhaseViewObserver);
		
		risk.setRiskStartupPhaseModelObservable(objStartupPhaseModelObservable);
		risk.setRiskRiskReinforcementPhaseModelObservable(objRiskReinforcementPhaseModelObservable);
		risk.setRiskAttackPhaseModelObservable(objRiskAttackPhaseModelObservable);
		risk.setRiskFortifyPhaseModelObservable(objRiskFortifyPhaseModelObservable);
		risk.setRiskStartupEndPhaseModelObservable(objRiskStartupEndPhaseModel);

		
		risk.setRiskPhaseViewObserver(objPhaseViewObserver);
		risk.getRiskPhaseViewObserver().generatePhaseView();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Edit
	 */
	private void initComponents() {

		/*
		 * jPanel1 = new javax.swing.JPanel();
		 */ jPanel1 = new RiskMapPanelViewController(risk);
		/*
		 * jPanel3 = new javax.swing.JPanel();
		 */ jPanel3 = new RiskPlayerPanelViewController(risk);
		statusLabel = new javax.swing.JLabel();
		AttackButton = new javax.swing.JButton();
		EndButton = new javax.swing.JButton();
		FortifyButton = new javax.swing.JButton();
		CardButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance()
				.getContext().getResourceMap(RiskController.class);
		setTitle(resourceMap.getString("Form.title")); // NOI18N
		setBackground(resourceMap.getColor("Form.background")); // NOI18N
		setForeground(resourceMap.getColor("Form.foreground")); // NOI18N
		setName("Form"); // NOI18N

		jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
		jPanel1.setBorder(null);
		jPanel1.setName("jPanel1"); // NOI18N
		jPanel1.setLayout(null);

		jPanel3.setBackground(resourceMap.getColor("jPanel3.background")); // NOI18N
		jPanel3.setBorder(null);
		jPanel3.setForeground(resourceMap.getColor("jPanel3.foreground")); // NOI18N
		jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		jPanel3.setName("jPanel3"); // NOI18N
		jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		statusLabel.setFont(resourceMap.getFont("statusLabel.font")); // NOI18N
		statusLabel.setForeground(resourceMap.getColor("statusLabel.foreground")); // NOI18N
		statusLabel.setText("New Game"); // NOI18N
		statusLabel.setName("statusLabel"); // NOI18N
		jPanel3.add(statusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 63, 427, -1));

		AttackButton.setFont(resourceMap.getFont("AttackButton.font")); // NOI18N
		AttackButton.setText("Attack"); // NOI18N
		AttackButton.setName("AttackButton"); // NOI18N
		AttackButton.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				AttackButtonMouseClicked(evt);
			}
		});
		jPanel3.add(AttackButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, 89, -1));

		EndButton.setVisible(false);
		EndButton.setFont(resourceMap.getFont("EndButton.font")); // NOI18N
		EndButton.setText("End"); // NOI18N
		EndButton.setName("EndButton"); // NOI18N
		EndButton.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				EndButtonMouseClicked(evt);
			}
		});
		jPanel3.add(EndButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 30, -1, 30));

		FortifyButton.setVisible(false);
		FortifyButton.setFont(resourceMap.getFont("FortifyButton.font")); // NOI18N
		FortifyButton.setText("Fortify"); // NOI18N
		FortifyButton.setName("Fortify"); // NOI18N
		FortifyButton.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				FortifyButtonMouseClicked(evt);
			}
		});
		jPanel3.add(FortifyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(661, 30, 90, 30));

		CardButton.setVisible(true);
		CardButton.setFont(resourceMap.getFont("CardButton.font")); // NOI18N
		CardButton.setText("Card"); // NOI18N
		CardButton.setName("CardButton"); // NOI18N
		CardButton.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				CardButtonMouseClicked(evt);
			}
		});
		jPanel3.add(CardButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(438, 25, 220, 25));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
				.addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 533,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)));

		pack();
	}

	private void AttackButtonMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_AttackButtonMouseClicked
		risk.setState(RiskGameModel.ATTACK);
		FortifyButton.setVisible(false);
		EndButton.setVisible(false);
		statusLabel.setText("Select a territory to attack with");
		if (AttackButton.getText().equals("Retreat")) {
			risk.setState(RiskGameModel.ACTIVE_TURN);
			risk.aTerritory = null;
			risk.dTerritory = null;
			if (risk.active == risk.defender)
				risk.active = risk.curPlayer;
			risk.defenseNum = 0;
			risk.attackNum = 0;
			AttackButton.setText("Attack");
			EndButton.setVisible(true);
			FortifyButton.setVisible(true);
			statusLabel.setText("What would you like to do?");
			jPanel1.repaint();
		}
		// AttackButton.setText("Retreat");

	}

	private void EndButtonMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_EndButtonMouseClicked
		risk.nextPlayer();
		risk.setState(RiskGameModel.START_TURN);
		risk.gamePhaseActive(0, 0);
		risk.active = risk.curPlayer;
		jPanel3.repaint();
		statusLabel.setText("Recieved a bonus of " + risk.curPlayer.getNumberOfArmies());
		AttackButton.setVisible(false);
		EndButton.setVisible(false);
		FortifyButton.setVisible(false);
		risk.drawn = false;

	}

	private void FortifyButtonMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_FortifyButtonMouseClicked
		risk.setState(RiskGameModel.FORTIFY);
		statusLabel.setText("Select a country move armies from");
	}

	private void CardButtonMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_CardButtonMouseClicked
		// risk.setState(RiskGameModel.TRADE_CARDS);
		GenerateCardPanel();
		jPanel1.repaint();
	}

	public static void ShowGUI() {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new RiskController().setVisible(true);
			}
		});
	}

	private int i;
	private JPanel controlPanel1;
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton AttackButton;
	private javax.swing.JButton CardButton;
	private javax.swing.JButton EndButton;
	private javax.swing.JButton FortifyButton;
	/*
	 * private javax.swing.JPanel jPanel1;
	 */private RiskMapPanelViewController jPanel1;
	/*
	 * private javax.swing.JPanel jPanel3;
	 */ private RiskPlayerPanelViewController jPanel3;
	private javax.swing.JLabel statusLabel;
	// End of variables declaration//GEN-END:variables

	public void mouseClicked(MouseEvent me) {
		int x = me.getX();
		int y = me.getY();
		String name;
		String out;

		if (risk.getState() == RiskGameModel.NEW_GAME) { //0
		//startup
			risk.gamePhaseSetup(x, y);
			name = risk.curPlayer.getName();
			statusLabel.setText("Place an army on a unoccupied territory");
			risk.notifyPhaseViewChange();
		}

		if (risk.getState() == RiskGameModel.INITIAL_REINFORCE) { //1
			//startup
			
			risk.gamePhaseSetup(x, y);
			name = risk.curPlayer.getName();
			statusLabel.setText("Place an army on a territory you occupy");
			risk.notifyPhaseViewChange();
		}

		if (risk.getState() == RiskGameModel.ATTACK) {
			name = risk.curPlayer.getName();
			if (risk.getState() == RiskGameModel.ATTACKING) {
				AttackButton.setText("Retreat");
				statusLabel.setText("Select an opposing territory");
			}
			out = risk.gamePhaseActive(x, y);
			risk.notifyPhaseViewChange();
		}

		if (risk.getState() == RiskGameModel.START_TURN) {
			risk.gamePhaseActive(x, y);
			risk.active = risk.curPlayer;
			name = risk.curPlayer.getName();
			statusLabel.setText("Recieved a bonus of " + risk.curPlayer.getNumberOfArmies());
			risk.notifyPhaseViewChange();
		}

		if (risk.getState() == RiskGameModel.REINFORCE) {
			risk.notifyPhaseViewChange();
			name = risk.curPlayer.getName();
			risk.gamePhaseActive(x, y);
			statusLabel.setText("You have " + risk.curPlayer.getNumberOfArmies() + " left to place");
			if (risk.curPlayer.getNumberOfArmies() == 0) {
				risk.setState(RiskGameModel.ACTIVE_TURN);
			}

		}

		if (risk.getState() == RiskGameModel.ACTIVE_TURN) {
			name = risk.curPlayer.getName();
			statusLabel.setText("What would you like to do?");
			EndButton.setVisible(true);
			FortifyButton.setVisible(true);
			AttackButton.setText("Attack");

//			/* Only for testing */
//			risk.curPlayer.setCard(new RiskCardModel(0, 0));
//			risk.curPlayer.setCard(new RiskCardModel(1, 1));
//			risk.curPlayer.setCard(new RiskCardModel(2, 2));
//			risk.curPlayer.setCard(new RiskCardModel(3, 2));
//			risk.curPlayer.setCard(new RiskCardModel(3, 3));
//
//			/* Only for testing */

			AttackButton.setVisible(true);
			if (risk.curPlayer.getCard().size() > 2)
				CardButton.setVisible(true);
			else
				CardButton.setVisible(false);
			//risk.notifyPhaseViewChange();
		}

		if (risk.getState() == RiskGameModel.ATTACKING) {
			name = risk.curPlayer.getName();
			AttackButton.setText("Retreat");
			statusLabel.setText("Select an opposing territory");
			out = risk.gamePhaseActive(x, y);
			// System.out.println(out);
			risk.notifyPhaseViewChange();
		}

		if (risk.getState() == RiskGameModel.ATTACK_PHASE) {
			// jInternalFrame1.setVisible(true);
			int attackArmies = risk.aTerritory.getArmies();
			int defenseArmies = risk.dTerritory.getArmies();
			int numofatt = 0;
			// If attackers turn
			if (risk.active == risk.curPlayer) {
				if (attackArmies > 3) {
					if (y > 250 && y < 280) {// if in y coord
						if (x > 420 && x < 460) // If dice one
							numofatt = 1;
						if (x > 480 && x < 520) // if dice two
							numofatt = 2;
						if (x > 540 && x < 580)
							numofatt = 3;
					} // in y coord
				} // if attcking with 3
				if (attackArmies == 3) {// if attakking with two
					if (y > 250 && y < 280) {
						if (x > 460 && x < 500)
							numofatt = 1;
						if (x > 510 && x < 550)
							numofatt = 2;
					} // in y coord
				} // end if can attack with two

				if (attackArmies == 2) {// can only attack with one
					if (y > 250 && y < 280) {
						if (x > 480 && x < 520)
							numofatt = 1;
					} // in y
				} // end only attack with one

				if (numofatt != 0) {// change player is num is selected
					risk.active = risk.defender;
					risk.setAttack(numofatt);
				}

			} // end attackers turn

			// If defenders turn
			else if (risk.active == risk.defender) {
				if (defenseArmies > 1 && risk.attackNum > 1) {
					if (y > 250 && y < 280) {
						if (x > 460 && x < 500)
							numofatt = 1;
						if (x > 510 && x < 550)
							numofatt = 2;
					}
				} else {
					if (y > 250 && y < 280) {
						if (x > 480 && x < 520)
							numofatt = 1;
					}
				}

				if (numofatt > 0) {
					risk.setDefend(numofatt);
					risk.engageBattle();
					if (defenseArmies - risk.dTerritory.getArmies() == 1)
						statusLabel.setText(risk.curPlayer.getName() + " has destroyed an army");
					else if (defenseArmies - risk.dTerritory.getArmies() == 2)
						statusLabel.setText(risk.curPlayer.getName() + " has destroyed two armies");
					else if (attackArmies - risk.aTerritory.getArmies() == 1)
						statusLabel.setText(risk.curPlayer.getName() + " has lost an army");
					else if (attackArmies - risk.aTerritory.getArmies() == 2)
						statusLabel.setText(risk.curPlayer.getName() + " has lost two armies");

					if (risk.aTerritory.getArmies() == 1) {
						risk.setState(RiskGameModel.ACTIVE_TURN);
						statusLabel.setText(risk.curPlayer.getName() + " has lost the battle");
						AttackButton.setText("Attack");
						FortifyButton.setVisible(true);
						EndButton.setVisible(true);
						risk.defenseNum = 0;
						risk.attackNum = 0;
						risk.dTerritory = null;
						risk.aTerritory = null;
					}
				}

			} /// end if defenders turn
			risk.notifyPhaseViewChange();
		} // End attackPhase

		if (risk.getState() == RiskGameModel.CAPTURE) {
			statusLabel.setText("Select number of armies to move to " + risk.dTerritory.getName());
			AttackButton.setVisible(false);
			AttackButton.setText("Attack");
			int max = risk.aTerritory.getArmies() - 1;
			int min = risk.attackNum;
			if (y > 230 && y < 257) {// if y is correct
				if (x > 600 && x < 650)// if max
					risk.defenseNum = risk.aTerritory.getArmies() - 1; // max
				if (x > 520 && x < 570) { // if inc
					if (risk.defenseNum < max)
						risk.defenseNum++;
					else
						statusLabel.setText("Maximum units already selected");
				} // end if sub
				if (x > 440 && x < 490) {// if dec
					if (risk.defenseNum > min)
						risk.defenseNum--;
					else
						statusLabel.setText("Minimum units already selected");
				} // end if add
				if (x > 360 && x < 410)// min
					risk.defenseNum = min;
			} // end if y coord

			if (x > 460 && x < 545) {// move has ben clicked
				if (y > 325 && y < 355) {// then occupy the territory
					AttackButton.setVisible(true);
					if (risk.defenseNum == 1)
						statusLabel.setText("1 army moved to " + risk.dTerritory.getName());
					else
						statusLabel.setText(risk.defenseNum + " armies moved to " + risk.dTerritory.getName());

					EndButton.setVisible(true);
					FortifyButton.setVisible(true);
					risk.capture();
				}
			}
			risk.notifyPhaseViewChange();
		} // end capturing

		if (risk.getState() == RiskGameModel.FORTIFY) {
			risk.gamePhaseActive(x, y);
			statusLabel.setText("Select a country to move armies too");
			risk.notifyPhaseViewChange();
		}

		if (risk.getState() == RiskGameModel.FORTIFYING) {
			risk.gamePhaseActive(x, y);
		}

		if (risk.getState() == RiskGameModel.FORTIFY_PHASE) {
			int from = risk.aTerritory.getArmies();

			if (y > 230 && y < 257) {// if y is correct
				if (x > 600 && x < 650)// if max
					if (risk.defenseNum == (from - 1))
						statusLabel.setText("Maximum units already selected");
					else
						risk.defenseNum = (from - 1);// all but one
				if (x > 520 && x < 570) { // if inc
					if (risk.defenseNum < (from - 1))
						risk.defenseNum++;
					else
						statusLabel.setText("Maximum units already selected");
				} // end if inc
				if (x > 440 && x < 490) {// if dec
					if (risk.defenseNum > (from - 1))
						risk.defenseNum--;
					else
						statusLabel.setText("Minimum units already selected");
				} // end if add
				if (x > 360 && x < 410)// min
					if (risk.defenseNum == 0)
						statusLabel.setText("Minimum units already selected");
					else
						risk.defenseNum = 0;
			} // end if y coord

			if (x > 460 && x < 545) {// move has ben clicked
				if (y > 325 && y < 355) {// then occupy the territory
					AttackButton.setVisible(false);
					if (risk.defenseNum == 1)
						statusLabel.setText("1 army moved to " + risk.dTerritory.getName());
					else
						statusLabel.setText(risk.defenseNum + " armies moved to " + risk.dTerritory.getName());

					EndButton.setVisible(true);
					FortifyButton.setVisible(false);
					risk.aTerritory.looseArmies(risk.defenseNum);
					risk.dTerritory.addArmies(risk.defenseNum);
					risk.setState(RiskGameModel.ACTIVE_TURN);
				} // end y
			} // end x for movwe
			risk.notifyPhaseViewChange();
		} // ..fortify phase

		if (risk.getState() == RiskGameModel.TRADE_CARDS) {
			if (y > 350 && y < 380) {
				if (x > 475 && x < 525) { // if exxti button pushed
					risk.setState(RiskGameModel.ACTIVE_TURN);
					System.out.println("exitt");
				}
			} // end exit
			risk.notifyPhaseViewChange();
		} // end trade cards

		System.out.println("(" + x + ", " + y + ")");

		jPanel1.repaint();
		jPanel3.repaint();

	}

	public void GenerateCardPanel() {
		JFrame cardsFrame;
		JPanel statusPanel, cardPanel, cardbuttonsPanel;
		JButton OKButton;

		lstTradedCards = new ArrayList<RiskCardModel>();

		cardsFrame = new JFrame("Trade Cards");
		cardsFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		cardsFrame.setResizable(false);

		statusPanel = new JPanel();
		statusPanel.setLayout(new GridLayout(0, 1));
		cardStatusLabel = new JLabel("Please select the any 3 cards you want to trade");
		statusPanel.add(cardStatusLabel);
		cardsFrame.add(statusPanel, BorderLayout.NORTH);

		cardPanel = new JPanel();
		GridLayout experimentLayout = new GridLayout(0, 2);
		cardPanel.setLayout(experimentLayout);

		for (int i = 0; i <= risk.curPlayer.getCard().size() - 1; i++) {
			JButton jbn = new JButton(risk.curPlayer.getCard().get(i).toString().split("-")[0]);
			jbn.setName(risk.curPlayer.getCard().get(i).toString().split("-")[1] + "-"
					+ risk.curPlayer.getCard().get(i).toString().split("-")[2]);
			cardPanel.add(jbn);

			jbn.addMouseListener(new java.awt.event.MouseAdapter() {
				public void mouseClicked(java.awt.event.MouseEvent evt) {
					if (jbn.isEnabled()) {
						lstTradedCards.add(new RiskCardModel(Integer.valueOf(jbn.getName().split("-")[0]),
								jbn.getName().split("-")[1]));
						countTradeCards++;
						jbn.setEnabled(false);
						cardStatusLabel.setText(String.valueOf(countTradeCards));
					}

					else {
						jbn.setEnabled(true);

						if (isAlreadyAdded(jbn)) {
							for (RiskCardModel card : lstTradedCards) {
								if (card.card_type.equals(jbn.getName().split("-")[1])
										&& card.territory == Integer.valueOf(jbn.getName().split("-")[0])) {
									lstTradedCards.remove(card);
									countTradeCards--;
									break;
								}
							}
							cardStatusLabel.setText(String.valueOf(countTradeCards));
						}
					}
				}
			});
		}
		cardsFrame.add(cardPanel, BorderLayout.CENTER);

		cardbuttonsPanel = new JPanel();
		cardbuttonsPanel.setLayout(new GridLayout(0, 2));
		OKButton = new JButton("OK");
		cardbuttonsPanel.add(new Label(""));
		cardbuttonsPanel.add(OKButton);
		cardsFrame.add(cardbuttonsPanel, BorderLayout.SOUTH);

		cardsFrame.pack();
		cardsFrame.setVisible(true);

		OKButton.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				cardsOKButtonPressed();
			}
		});
	}

	private void cardsOKButtonPressed() { // Logic to add armies!
		if (isTradedCardSetValid()) {
			if (doesCardMatchCurrentPlayerTerritory() > 0) // Even if we have two matching countries to cards we will
															// only give him 2 more armies
				risk.curPlayer.addArmies(risk.fetchTradedArmiesCount() + 2);
			else
				risk.curPlayer.addArmies(risk.fetchTradedArmiesCount());
			cardStatusLabel.setText("Success");
			jPanel3.repaint();
		}
	}

	public int doesCardMatchCurrentPlayerTerritory() {
		int countMatchingCards = 0;

		for (RiskCardModel card : risk.curPlayer.getCard()) {
			for (RiskTerritoryModel territory : risk.curPlayer.getOccupiedTerritories()) {
				if (territory.getId() == card.territory)
					countMatchingCards++;
			}
		}

		return countMatchingCards;
	}

	private boolean isAlreadyAdded(JButton jbn) {

		for (RiskCardModel card : lstTradedCards) {
			if (card.territory == Integer.valueOf(jbn.getName().split("-")[0])
					&& card.card_type.equals(jbn.getName().split("-")[1]))
				return true;
		}
		return false;
	}

	/**
	 * This method checks if the TradeCardSet is valid or not i.e. if the number of
	 * cards is 3, and then checks if all 3 are either the same or all three are of
	 * different types or one of the three is a wild card
	 * 
	 */
	public Boolean isTradedCardSetValid() {

		if (lstTradedCards.size() == 3) {

			if (!isAWildCardSet()) {
				// If all the cards are same
				if (lstTradedCards.get(0).card_type.equals(lstTradedCards.get(1).card_type)
						&& lstTradedCards.get(1).card_type.equals(lstTradedCards.get(2).card_type)) {
					cardStatusLabel.setText("Success");
					return true;
				}

				// all 3 are different
				else if (!lstTradedCards.get(0).card_type.equals(lstTradedCards.get(1).card_type)
						&& !lstTradedCards.get(1).card_type.equals(lstTradedCards.get(2).card_type)
						&& !lstTradedCards.get(0).card_type.equals(lstTradedCards.get(2).card_type)) {
					cardStatusLabel.setText("Success");
					return true;
				}
			} else {
				if (isValidCountWildCard()) {
					cardStatusLabel.setText("Success");
					return true;
				} else {
					cardStatusLabel.setText("Please select only/atleast three cards!");
					return false;
				}
			}
		}

		cardStatusLabel.setText("Please select only/atleast three cards!");
		return false;
	}

	/**
	 * This method checks if the TradeCardSet is a WildCardSet or not.
	 */
	public Boolean isAWildCardSet() {
		for (RiskCardModel card : lstTradedCards) {
			if (card.card_type.equals("WILD"))
				return true;
		}
		return false;
	}

	public Boolean isValidCountWildCard() {
		int count = 0;
		for (RiskCardModel card : lstTradedCards) {
			if (card.card_type.equals("WILD")) {
				count++;
			}
		}
		return (count > 1 ? false : true);
	}

	private void createLayout(JComponent... arg) {

		JPanel pane = (JPanel) getContentPane();
		GroupLayout gl = new GroupLayout(pane);
		pane.setLayout(gl);

		pane.setToolTipText("Content pane");

		gl.setAutoCreateContainerGaps(true);

		gl.setHorizontalGroup(gl.createSequentialGroup().addComponent(arg[0]).addGap(200));

		gl.setVerticalGroup(gl.createSequentialGroup().addComponent(arg[0]).addGap(120));

		pack();
	}

	void saySomething(String desc, MouseEvent e) {
		// jTextArea1.append(desc + " (" + e.getX() + "," + e.getY() + ")\n");
	}

	public void mousePressed(MouseEvent me) {
	}

	public void mouseReleased(MouseEvent me) {
	}

	public void mouseEntered(MouseEvent me) {
	}

	public void mouseExited(MouseEvent me) {
	}

	private JLabel cardStatusLabel;
	private RiskGameModel risk;
	private JFrame jfmCard;
	private JPanel jp;
	private int countTradeCards = 0;
	private List<RiskCardModel> lstTradedCards = new ArrayList<RiskCardModel>();

}