/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RiskStartGame.java
 *
 * Created on Nov 15, 2010, 11:13:31 AM
 */

package Risk.Controller;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

import javax.sound.midi.*;
import javax.swing.JTextField;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ScrollPaneConstants;

import Risk.Model.RiskCardModel;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import java.awt.event.ActionListener;
import java.awt.BorderLayout;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Label;
import java.awt.event.ActionEvent;

/**
 *
 * @author cube
 */
public class RiskStartGameController extends java.awt.Frame {
    /** Creates new form RiskStartGame */

    public RiskStartGameController() {
       initComponents();
        jButton1.setEnabled(false);
        setLocationRelativeTo(null);

        try{
        Sequence song = MidiSystem.getSequence(getClass().getResourceAsStream("../resources/song.mid"));
        Sequencer sequencer = MidiSystem.getSequencer();
        sequencer.open();

        sequencer.setSequence(song);
        sequencer.setLoopCount(2);
        //sequencer.start();

        }catch (IOException e) {}
        catch (MidiUnavailableException e) {}
        catch (InvalidMidiDataException e) {}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(1, 1, 1));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(1, 1, 1));
        jPanel1.setName("jPanel1"); // NOI18N

        jButton1.setText("Start Game");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Exit");
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Add RiskPlayer");
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("../resources/risk-logo.jpg"))); // NOI18N
        jLabel1.setName("jLabel1");
        
        JButton btnChooseMap = new JButton();
        btnChooseMap.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		try {
					generateChooseMapPanel();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	}
		
        });
        btnChooseMap.setText("Choose Map");
        btnChooseMap.setName("jButton1");
        btnChooseMap.setEnabled(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addComponent(jLabel1)
        					.addContainerGap(43, Short.MAX_VALUE))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(109)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.CENTER)
        						.addComponent(jButton2, GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
        						.addComponent(jButton3, GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
        						.addComponent(btnChooseMap, GroupLayout.PREFERRED_SIZE, 113, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jButton1, GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
        					.addGap(87))))
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jLabel1)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(btnChooseMap)
        			.addGap(12)
        			.addComponent(jButton1)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jButton2)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(jButton3)
        			.addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel1.setLayout(jPanel1Layout);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.exit(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            RiskAddPlayerController add = new RiskAddPlayerController();
            add.setVisible(true);


    }//GEN-LAST:event_jButton2ActionPerformed

    private void generateChooseMapPanel() throws IOException
    {        	
    	    	//File baseMap = new File()
    	    	StringBuilder sb = new 	StringBuilder();
    			String line;
    	    	BufferedReader brBaseMap = new BufferedReader(new InputStreamReader(RiskStartGameController.class.getResourceAsStream("/Risk/resources/Earth_updated.map")));
//                BufferedWriter out = new BufferedWriter(new FileWriter(
//                		"C:\\Users\\Admin\\Desktop\\Sample.txt",true));
//                
//    	    	 while ((line = brBaseMap.readLine()) != null) {
//	                    sb.append(line);
//	                }
//    	    	
//    	    	  out.write(sb.toString(),0,sb.length());
//	                out.newLine();
//	                out.close();
                JFrame generateMapFrame = new JFrame("Generate Map");
                generateMapFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                generateMapFrame.setResizable(false);
               

                Container pane  = generateMapFrame.getContentPane();
                pane.setLayout(new GridBagLayout());
                pane.setComponentOrientation(ComponentOrientation.UNKNOWN);
                GridBagConstraints c = new GridBagConstraints();
                
                
                scrollTextAreaPanel = new JPanel();
                c.fill = GridBagConstraints.HORIZONTAL;
                
                c.weightx = 30;
                c.ipady = 400;
                c.gridx = 1;
                c.gridy = 0;
                mapEditTextArea = new JTextArea("",200,120); 
                mapEditTextArea.setEditable(false);
                scrollTextAreaPanel.add(new JScrollPane(mapEditTextArea, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS , ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED));
                pane.add(scrollTextAreaPanel, c);
                
                JPanel inputLinePanel = new JPanel();
                mapEditTextField = new JTextField("",120);
                inputLinePanel.add(mapEditTextField);
                c.fill = GridBagConstraints.HORIZONTAL;
                c.weightx = 1;
                c.gridx = 1;
                c.ipady = 50;
                c.gridy = 2;
                pane.add(inputLinePanel, c);
                
                
                JPanel buttonsPanel = new JPanel();
                JButton addButton = new JButton("Add");
                JButton finishButton = new JButton("Finish");
                
                addButton.addActionListener(new ActionListener() { 
                	  public void actionPerformed(ActionEvent e) { 
                		  addButtonPressed(e);
                	  }
                	} );
                
                finishButton.addActionListener(new ActionListener() { 
              	  public void actionPerformed(ActionEvent e) { 
              		finishButtonPressed(e);
              	  }

              	} );
                
                buttonsPanel.add(addButton);
                buttonsPanel.add(finishButton);
                
                c.weightx = 0.5;
                c.gridx = 1;
                c.ipady = 50;
                c.gridy = 3;
                pane.add(buttonsPanel, c);

            	generateMapFrame.pack();
            	generateMapFrame.setVisible(true);       
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

             RiskController.ShowGUI();
             setVisible(false);
        
         // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


	private void finishButtonPressed(ActionEvent e) {
		// TODO Auto-generated method stub

		try {
			File currentMapFile = new File("/Risk/resources/CurrentMap.map");
			currentMapFile.createNewFile();
			BufferedWriter brCurrentMapModifier = new BufferedWriter(new FileWriter("/Risk/resources/CurrentMap.map",true));
		    brCurrentMapModifier.write(mapEditTextArea.getText(), 0, mapEditTextArea.getText().length());
		    
		    brCurrentMapModifier.close();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}		
	} 
	
	private void initializeMapVariables() {
		// TODO Auto-generated method stub
		BufferedReader brEarthMapReader = new BufferedReader(new InputStreamReader(RiskStartGameController.class.getResourceAsStream("/Risk/resources/Earth_updated.map")));
	    String baseMapLine;
		 try {
			while((baseMapLine = brEarthMapReader.readLine()) != null)
			 {
				 sbBaseMapString.append(baseMapLine);
			 }
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}
	
	private void CurrentGameMapEditor(String editTextArea) {
	
		StringBuilder currentMapInitializer = new StringBuilder();
		String EarthMapLineRead;
		BufferedWriter brCurrentMapModifier;
		File currentGameMap;
		

			try {
				 currentGameMap = new File("Risk/resources/CurrentMap.map");
				 brCurrentMapModifier = new BufferedWriter(new FileWriter(currentGameMap,true));
				
					// Called during initialize
					if(editTextArea.equals(""))
					{
						currentMapInitializer.append(sbNewMapText.substring(0, sbNewMapText.indexOf("[Territories]")));
						brCurrentMapModifier.write(currentMapInitializer.toString(),0,currentMapInitializer.toString().length());
						brCurrentMapModifier.close();
					}
					else
					{
						brCurrentMapModifier.write(editTextArea,0,editTextArea.length());
						brCurrentMapModifier.close();
					}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		

 	private void addButtonPressed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(validateMapLineInputText(mapEditTextField.getText()))
		{
			mapEditTextArea.append(mapEditTextInsertCoordinates(mapEditTextField.getText()) + "\n");
			scrollTextAreaPanel.repaint();
			mapEditTextField.setText("");
		}
		else
		{
			//message user!
		}	
	} 

    private String mapEditTextInsertCoordinates(String mapInputLineText) {
		// TODO Auto-generated method stub
    	StringBuilder sbInputWithCoordinates = new StringBuilder();
    	String territory = mapInputLineText.substring(0,mapInputLineText.indexOf(','));
    	
    	String coordinates = fetchCoordinates(territory);
	    
    	sbInputWithCoordinates.append(mapInputLineText.substring(0,mapInputLineText.indexOf(',')))
    						  .append(coordinates)
    						  .append(mapInputLineText.substring(mapInputLineText.indexOf(',')+ 1, mapInputLineText.length()));
    						  
    	 return sbInputWithCoordinates.toString();        
    }
    
    private String fetchCoordinates(String territory)
    {
    	String coordinates = "";   
		initializeMapVariables();
    	coordinates = recursiveSearchCoordinates(sbBaseMapString.toString(), territory);    	
    	return coordinates;
    }

    private String recursiveSearchCoordinates(String baseMapString, String territory)
    {
    	int index;
    	index = baseMapString.indexOf(territory);
        if(index != -1)
        {
	    	if(isCoordinatesNextToIt(baseMapString,index))
	    	{   //
	    		fetchedCoordinates = fetchCoordinates(index + territory.length(),baseMapString); // alaska-,27,29,-abc : pass char within colon.
	    		return fetchedCoordinates;
	    	}
	    	else
	    	{
	    		baseMapString = baseMapString.substring(index + territory.length() + 1,baseMapString.length() - 1);
	    		recursiveSearchCoordinates(baseMapString,territory);
	    	}
        }
        else
        	return fetchedCoordinates;
		return fetchedCoordinates;
    }
    
    
    
	private String fetchCoordinates(int index, String baseMapString) {
		// TODO Auto-generated method stub
		StringBuilder coordinates = new StringBuilder(); 
		for(char a : baseMapString.substring(index, baseMapString.length() - 1).toCharArray())
		{
			if(!Character.isDigit(a))
			{
				if(a!=',' && Character.toString(a) !="")
					break;
			}
			coordinates.append(a); // Like ,29,39,
		}
		return coordinates.toString();
	}

	private boolean isCoordinatesNextToIt(String baseMapString, int index) {
		// TODO Auto-generated method stub
		String subbaseMapString = baseMapString.substring(index);
		if(Character.isDigit(subbaseMapString.charAt(subbaseMapString.indexOf(',') + 1)))
			return true;
		else
			return false;
	}

	private Boolean validateMapLineInputText(String text) {
		// TODO Auto-generated method stub
		return true;
	}

	/**
    * @param args the command line arguments
    */



    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RiskStartGameController().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea mapEditTextArea; 
    private javax.swing.JTextField mapEditTextField;
    private String sbNewMapText;
    private String fetchedCoordinates;
    private JPanel scrollTextAreaPanel;
    private StringBuilder sbBaseMapString = new StringBuilder();
    
}
